import asyncio
import json
from autogen_agentchat.ui import Console
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_ext.models.openai import OpenAIChatCompletionClient
from autogen_ext.agents.web_surfer import MultimodalWebSurfer
from autogen_agentchat.agents import AssistantAgent

async def main() -> None:
    # Initialize the model client (replace YOUR_API_KEY with your actual API key)
    model_client = OpenAIChatCompletionClient(model="gemini-2.0-flash", api_key="***")
    
    # Create a MultimodalWebSurfer agent with appropriate settings.
    web_surfer = MultimodalWebSurfer(
        name="MultimodalWebSurfer",
        model_client=model_client,
        headless=False,             # Set to False to see the browser window
        animate_actions=True,       # Enable animations for visual clarity
        start_page="http://localhost:3000/onboarding"
    )
    
    # Create a reasoning agent that will analyze the plan and determine the next step.
    reasoning_agent = AssistantAgent(
        name="ReasoningAgent",
        model_client=model_client,
        system_message=(
            "You are a reasoning agent whose role is to assess the current state of the task "
            "and determine what the next step should be. When a JSON plan is provided, "
            "analyze it along with any outputs from previous steps and suggest the next best action."
        )
    )
    
    # Create a team with both the reasoning agent and the web_surfer.
    team = RoundRobinGroupChat([reasoning_agent, web_surfer])
    
    # Define your JSON plan. The agent(s) are expected to parse this JSON and execute its steps.
    plan = {
      "plan": [
        {
          "step": 1,
          "action": "Navigate to URL",
          "step_name": "Navigate to Onboarding Page",
          "description": "Navigate to the SmartOnBoarding page to initiate the onboarding process.",
          "url": "http://localhost:3000/onboarding"
        },
        {
          "step": 2,
          "action": "Verify Active Stepper Step",
          "step_name": "Client Overview",
          "description": "Verify that the 'Client Overview' step is active in the stepper.",
          "step_label": "Client Overview"
        },
        {
          "step": 3,
          "action": "Fill Text Field",
          "step_name": "Fill Client Legal Name",
          "description": "Fill in the 'Client Legal Name' text field with the client's legal name.",
          "value": "Google LLC"
        },
        {
          "step": 4,
          "action": "Fill Text Field",
          "step_name": "Fill DBA (Doing Business As)",
          "description": "Fill in the 'DBA (Doing Business As)' text field with the DBA name.",
          "value": "Google"
        },
        {
          "step": 5,
          "action": "Click Button",
          "step_name": "Click Next on Client Overview",
          "description": "Click the 'Next' button to proceed to the next step."
        },
        {
          "step": 6,
          "action": "STOP: NO FURTHER ACTION",
          "step_name": "Terminate",
          "description": "Task Successfull, terminate the task."
        }
      ]
    }
    
    # Convert the plan to a JSON string and use it as the task prompt.
    task_prompt = json.dumps(plan)
    
    # Run the team with the JSON plan.
    stream = team.run_stream(task=task_prompt)
    await Console(stream)
    
    # Close the browser session and model client.
    await web_surfer.close()

asyncio.run(main())
